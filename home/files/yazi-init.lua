-- Yazi init.lua - Custom linemode functions with enhanced debugging
-- Generated by Nix configuration

-- Global debug flag - set to false to disable debug output
local DEBUG_ENABLED = true

local function debug_log(msg)
  if DEBUG_ENABLED then
    ya.dbg("LINEMODE: " .. msg)
  end
end

-- Debug initialization
debug_log("=== INIT.LUA STARTING ===")

function Linemode:compact_meta()
  ya.dbg("LINEMODE: compact_meta function called!")
  local success, result = pcall(function()
    ya.dbg("LINEMODE: Inside pcall, about to get file")
    local file = self._file
    
    -- Validate file object
    if not file then
      error("file object is nil")
    end
    
    if not file.cha then
      error("file.cha is nil")
    end
    
    local cha = file.cha
    
    -- DEBUG: Log actual properties for troubleshooting
    -- STUBBED OUT DUE TO RUNTIME ERROR:
    --   2025-10-15T22:57:55.558373Z ERROR yazi_plugin::utils::log: "compact_meta failed: [string \"init.lua\"]:36: bad argument #1 to 'for iterator' (table expected, got Cha)"
    -- if DEBUG_ENABLED then
    --   local debug_props = {}
    --   for k, v in pairs(cha) do
    --     table.insert(debug_props, k .. "=" .. tostring(v))
    --   end
    --   debug_log("CHA PROPERTIES: " .. table.concat(debug_props, ", "))
    -- end
    
    -- Size (6 chars total) - format as fixed precision K/M/G/T/P
    local size_str = "     -"
    local size = cha.len  -- API: len field contains file size
    
    if size and size > 0 then
      local units = {"", "K", "M", "G", "T", "P"}
      local unit_idx = 1
      local val = size
      
      -- Use 1024 consistently for binary units
      while val >= 1024 and unit_idx < #units do
        val = val / 1024
        unit_idx = unit_idx + 1
      end
      
      if unit_idx == 1 then
        size_str = string.format("%6d", math.floor(val))
      else
        local unit = units[unit_idx]
        if val >= 100 then
          size_str = string.format("%5.0f%s", val, unit)
        elseif val >= 10 then
          size_str = string.format("%5.1f%s", val, unit)
        else
          size_str = string.format("%5.2f%s", val, unit)
        end
      end
    end
    
    -- Mtime (10 chars) - format as MMDDHHMMSS
    local mtime_str = "         -"
    local mtime = cha.mtime  -- API: mtime field contains modification time as float seconds since epoch
    
    if mtime and mtime > 0 then
      -- Convert to integer if needed (handle floating point timestamps)
      local mtime_int = math.floor(tonumber(mtime) or 0)
      if mtime_int > 0 then
        mtime_str = os.date("%m%d%H%M%S", mtime_int)
        
        -- EXPERIMENTAL UNICODE OPTIONS (commented out for future experimentation):
        -- Circled numbers: {"①", "②", "③", "④", "⑤", "⑥", "⑦", "⑧", "⑨", "⑩", "⑪", "⑫"}
        -- Roman numerals: {"Ⅰ", "Ⅱ", "Ⅲ", "Ⅳ", "Ⅴ", "Ⅵ", "Ⅶ", "Ⅷ", "Ⅸ", "Ⅹ", "Ⅺ", "Ⅻ"}
        -- Superscript: {"¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹", "¹⁰", "¹¹", "¹²"}
        -- Braille patterns: {"⠁", "⠂", "⠃", "⠄", "⠅", "⠆", "⠇", "⠈", "⠉", "⠊", "⠋", "⠌"}
        -- Clock symbols: 🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛 ⏰⏱️⏲️
        -- Seasonal emojis: 🌨️❄️🌸🌞🌾🍂🍁🎃🦃🎄⛄🎆
        -- Separators: •·∙‧⋅⦁▪◆○●
      end
    end
    
    -- Permissions (3 chars) - show just rwx as octal (e.g., "755")
    local perm_str = "   "
    
    -- Use the perm() method which returns the formatted permission string, or mode field for raw numeric
    local perm_formatted = cha:perm()  -- This returns a string like "drwxr-xr-x" or nil
    local mode_raw = cha.mode          -- This returns numeric mode or nil
    
    if DEBUG_ENABLED then
      debug_log("PERM FORMATTED: " .. tostring(perm_formatted) .. " (type: " .. type(perm_formatted) .. ")")
      debug_log("MODE RAW: " .. tostring(mode_raw) .. " (type: " .. type(mode_raw) .. ")")
    end
    
    if mode_raw then
      -- Extract just the rwx permission bits (lowest 9 bits)
      local mode = mode_raw & 0x1FF  -- Get lowest 9 bits: rwx for owner/group/other
      perm_str = string.format("%03o", mode)
      debug_log("FINAL PERM: " .. mode_raw .. " -> " .. perm_str)
    elseif perm_formatted and type(perm_formatted) == "string" and #perm_formatted >= 10 then
      -- Fallback: parse permission string format like "drwxr-xr-x"
      local function parse_perms(s)
        local val = 0
        if string.sub(s, 1, 1) == "r" then val = val + 4 end
        if string.sub(s, 2, 2) == "w" then val = val + 2 end
        if string.sub(s, 3, 3) == "x" or string.sub(s, 3, 3) == "s" or string.sub(s, 3, 3) == "t" then val = val + 1 end
        return val
      end
      
      local owner = parse_perms(string.sub(perm_formatted, 2, 4))
      local group = parse_perms(string.sub(perm_formatted, 5, 7))
      local other = parse_perms(string.sub(perm_formatted, 8, 10))
      
      perm_str = string.format("%d%d%d", owner, group, other)
      debug_log("STRING PERM FALLBACK: " .. perm_formatted .. " -> " .. perm_str)
    else
      debug_log("NO PERM DATA AVAILABLE")
      perm_str = "???"
    end
    
    -- Return exactly 20 chars: [6] space [10] space [3] 
    return string.format("%s %s %s", size_str, mtime_str, perm_str)
  end)
  
  if not success then
    ya.err("compact_meta failed: " .. tostring(result))
    -- Also log to debug what specifically is failing
    debug_log("ERROR DETAILS: " .. tostring(result))
    return string.format("%-20s", "ERROR")
  end
  
  return result
end


-- Debug completion  
ya.dbg("=== INIT.LUA COMPLETED SUCCESSFULLY ===")
ya.dbg("Linemode:compact_meta function registered")
