#!/usr/bin/env bash

. ~/bin/functions.sh 

# Robustly restart claude desktop with updated configuration
# TODO: make this a systemd service that can be restarted..
CLAUDE_DIR="/home/tim/claude"
PROMPT_DIR="${CLAUDE_DIR}/prompt"
PROMPT_ARCHIVE_DIR="${CLAUDE_DIR}/prompt/archive"
USER_APP_DATA_DIR="$(wslpath "$(cmd.exe /c echo %APPDATA% 2> /dev/null | tr -d '\r')")"
USER_LOCAL_APP_DATA_DIR="$(wslpath "$(cmd.exe /c echo %LOCALAPPDATA% 2> /dev/null | tr -d '\r')")"
CLAUDE_APP_DATA_DIR="$USER_APP_DATA_DIR/Claude"
CLAUDE_APP_LOG_DIR="$CLAUDE_APP_DATA_DIR/logs"
CONFIG_FILE_PATH="$CLAUDE_APP_DATA_DIR/claude_desktop_config.json"
NIX_GENERATED_CONFIG_FILE_PATH="$HOME/claude-mcp-config.json"
WSL_EXE_WIN_PATH="$(powershell.exe '(Get-Command wsl).Source' 2>/dev/null | tr -d '\r' | sed 's/\\/\\\\/g')"
CLAUDE_EXE_PATH="$USER_LOCAL_APP_DATA_DIR/AnthropicClaude/claude.exe"
CLAUDE_EXE_ARGS=( --trace-warnings )
STATIC_PROMPT="${PROMPT_DIR}/static-prompt.md"
# Claude writes this file in response to "write new chat prompt", uttered by user
#   after iterating response to "new chat prompt".
CLAUDE_GENERATED_NEW_CHAT_PROMPT_FILENAME=claude-suggested-new-chat-prompt.md
CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH="${PROMPT_DIR}/${CLAUDE_GENERATED_NEW_CHAT_PROMPT_FILENAME}"
# Final prompt file referred to in the new chat in Claude Desktop.
#   It is generated by concatenating all the .md files in PROMPT_DIR/
FINAL_GENERATED_PROMPT="${PROMPT_DIR}/final-new-chat-prompt.md"

log() { printf "%s %s\n" "${GRAY}$(date '+%Y-%m-%d %H:%M:%S')${RESET}" "$*"; }
err() { log "ERROR $*"; exit 1; }
cmdrepr() { printf "${BRGREEN}$*${RESET}"; }
pathrepr() { printf "${BLUE}$*${RESET}"; }

# Updated check_mcp_servers function for restart_claude script
# Replace the existing check_mcp_servers function with this:

check_mcp_servers() {
    log "Checking nixmcp framework availability..."
    
    # Check if the nixmcp-generated config exists
    if [ ! -f "$NIX_GENERATED_CONFIG_FILE_PATH" ]; then
        err "MCP servers config not found at $NIX_GENERATED_CONFIG_FILE_PATH. Ple]11;rgb:fdfd/f6f6/e3e3\ase run 'home-manager switch' to generate it."
    fi
    
    log "✓ Found nixmcp framework configuration at $NIX_GENERATED_CONFIG_FILE_PATH"
    
    # Validate JSON structure - check for invalid wrappers
    if command -v jq >/dev/null 2>&1; then
        if jq -e '.mcpServers | to_entries[] | select(.value._type)' "$NIX_GENERATED_CONFIG_FILE_PATH" >/dev/null 2>&1; then
            err "ERROR: Configuration contains invalid wrapper structures. Check home/modules/mcp-servers.nix"
        fi
        
        local configured_servers
        configured_servers=$(jq -r '.mcpServers | keys[]' "$NIX_GENERATED_CONFIG_FILE_PATH" 2>/dev/null | sort)
        
        if [ -z "$configured_servers" ]; then
            err "No MCP servers found in configuration"
        fi
        
        log "✓ Clean JSON configuration with servers:"
        echo "$configured_servers" | sed 's/^/    /'
    else
        log "⚠️  Warning: jq not available for JSON validation"
    fi
    
    # Check Node.js for framework servers
    if ! command -v node >/dev/null 2>&1; then
        log "⚠️  Warning: node not found in PATH. Framework servers may not work."
    else
        log "✓ Node.js available: $(node --version)"
    fi
    
    # Check uvx for Python servers
    if ! command -v uvx >/dev/null 2>&1; then
        log "⚠️  Warning: uvx not found in PATH. Python MCP servers may not work."
    else
        log "✓ uvx available for Python MCP servers"
    fi
    
    log "✓ nixmcp framework ready"
}

assert_prereqs() {
    log "Checking pre-reqs.."
    check_mcp_servers
    mkdir -p "${PROMPT_DIR}"
    msg="Claude-generated prompt file ${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}"
    if [ -f "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" ]; then
        if ! cat "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" > /dev/null 2>&1; then
            err "$msg exists but cannot be read"
        fi
    else
        log "Optional $msg was not found. Ignoring.."
    fi
}

# Backup/Archive last generated prompt before overwriting
backup_claude_prompt() {
    if [ ! -f "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" ]; then
        return 0
    fi
    
    log "Backing up existing Claude-generated prompt"
    
    # Generate title from first meaningful line
    local title=$(head -20 "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" | grep -E "^(# |## |Project|Context|Current|Issue)" | head -1 | sed 's/[^a-zA-Z0-9 -]//g' | tr ' ' '-' | tr '[:upper:]' '[:lower:]' | cut -c1-50 | sed 's/-*$//' || echo "untitled")
    local backup_name="${CLAUDE_GENERATED_NEW_CHAT_PROMPT_FILENAME}-${title}"
    local backup_path="${PROMPT_ARCHIVE_DIR}/${backup_name}.md"
    
    # Ensure unique filename
    local counter=1
    while [ -f "$backup_path" ]; do
        backup_path="${PROMPT_ARCHIVE_DIR}/${backup_name}-${counter}.md"
        ((counter++))
    done
    
    if cp "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" "$backup_path"; then
        log "Backup created: $(basename "$backup_path")"
    else
        log "Warning: Failed to create backup"
    fi
}

generate_new_chat_prompt() {
    assert_prereqs
    backup_claude_prompt
    log "Generating final combined prompt file"
    
    # Create a temporary file to build our combined prompt
    TEMP_FILE="${FINAL_GENERATED_PROMPT}.tmp"
    
    # Add timestamp header
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    echo "# GENERATED PROMPT" > "$TEMP_FILE"
    echo "Generated: ${TIMESTAMP}" >> "$TEMP_FILE"
    echo "" >> "$TEMP_FILE"
    
    if [ -f "$STATIC_PROMPT" ]; then
        log "Adding base static prompt"
        cat "$STATIC_PROMPT" >> "$TEMP_FILE"
        echo "" >> "$TEMP_FILE"
        echo "---" >> "$TEMP_FILE"
        echo "" >> "$TEMP_FILE"
    fi
    
    if [ -f "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" ]; then
        log "Adding Claude-generated prompt found at ${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}"
        cat "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" >> "$TEMP_FILE"
    fi    
    
    # Include all Markdown files in the prompt/ dir (excluding the ones we've already processed)
    PROMPT_FILES=$(find "${PROMPT_DIR}" -maxdepth 1 -type f -name "*.md" \
                   ! -wholename "$STATIC_PROMPT" \
                   ! -wholename "${CLAUDE_GENERATED_NEW_CHAT_PROMPT_PATH}" \
                   ! -wholename "${FINAL_GENERATED_PROMPT}" \
                   ! -name "*.tmp" | sort)
    
    # Process any additional Markdown files
    if [ -n "${PROMPT_FILES}" ]; then
        for PROMPT_FILE in ${PROMPT_FILES}; do
            # Skip files in the archive directory
            if [[ "$PROMPT_FILE" == *"/archive/"* ]]; then
                log "Skipping archived file: ${PROMPT_FILE}"
                continue
            fi
            
            if [ -f "${PROMPT_FILE}" ] && [ -r "${PROMPT_FILE}" ]; then
                log "Adding ${PROMPT_FILE}"
                echo "" >> "$TEMP_FILE"
                echo "---" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
                echo "# $(basename ${PROMPT_FILE})" >> "$TEMP_FILE"
                echo "" >> "$TEMP_FILE"
                cat "${PROMPT_FILE}" >> "$TEMP_FILE"
            else
                log "Warning: Cannot read file: ${PROMPT_FILE}"
            fi
        done
    else
        log "No additional Markdown files found to include"
    fi
    
    # Move the temporary file to the final location
    mv "$TEMP_FILE" "$FINAL_GENERATED_PROMPT"
    log "Successfully generated ${FINAL_GENERATED_PROMPT}"
}

cleanup_claude_processes() {
    log "Cleaning up any old Claude processes"
    taskkill.exe /F /IM "Claude.exe" /T 2>&1 | sed 's/^/    /'
}

generate_claude_desktop_config() {
    log "Using nix-generated Claude configuration.."
    # echo "USER_APP_DATA_DIR=$USER_APP_DATA_DIR"
    # echo "USER_LOCAL_APP_DATA_DIR=$USER_LOCAL_APP_DATA_DIR"
    # echo "CLAUDE_APP_DATA_DIR=$CLAUDE_APP_DATA_DIR"
    # echo "CLAUDE_APP_LOG_DIR=$CLAUDE_APP_LOG_DIR"
    # echo "CONFIG_FILE_PATH=$CONFIG_FILE_PATH"
    NIX_GENERATED_CONFIG_FILE_PATH="$HOME/claude-mcp-config.json"
    cp "$NIX_GENERATED_CONFIG_FILE_PATH" "$CONFIG_FILE_PATH"
    log "Copied Claude config to $CONFIG_FILE_PATH:"
    jq . "$CONFIG_FILE_PATH" | sed 's/^/    /'
}

launch_claude_desktop() {
    # local log_file="/tmp/claude_desktop_$(date '+%Y%m%d_%H%M%S').log"
    local log_file="/tmp/claude_desktop.log"
    log "Launching Claude in the background. Output is being logged to: $log_file"
    (set -x; "$CLAUDE_EXE_PATH" "${CLAUDE_EXE_ARGS[@]}" > "$log_file" 2>&1 &)
    local claude_pid=$!
    log "Claude process started with PID: $claude_pid  To watch logs, run: ${BLUE}tail -f $(pathrepr "$log_file") ${RESET}"
    log "Claude Desktop Log Dir: $CLAUDE_APP_LOG_DIR"
    local meta_prompt="Analyze your initial prompt using read_file ${FINAL_GENERATED_PROMPT}, use any read-only MCP tools and the provided paths and URLs in the prompt, and the project knowledge to supplement your understanding, then with a complete understanding of the situation, concisely summarize any known immediate action plan, and ask me whether I approve of you beginning working on it."
    copy_to_clipboard "$meta_prompt"
    log "The following prompt has been pushed onto your sytstem clipboard for use in your next chat:
    ${GREEN}$meta_prompt${RESET}"
}

main() {
    cleanup_claude_processes
    generate_new_chat_prompt
    generate_claude_desktop_config
    launch_claude_desktop
}
main
