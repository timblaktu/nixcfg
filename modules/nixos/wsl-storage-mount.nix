{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.wslStorageMount;
  
  # PowerShell script to mount bare disk from Windows side
  mountScript = pkgs.writeTextFile {
    name = "mount-4tb-storage.ps1";
    text = ''
      # Auto-generated by NixOS - DO NOT EDIT
      $logPath = "C:\Users\timbl\wsl\nixos-mount-storage.log"
      Start-Transcript -Path $logPath -Append
      
      $serialNumber = '${cfg.diskSerialNumber}'
      $mountName = '${cfg.mountName}'
      
      Write-Output "Looking up disk with serial number: $serialNumber"
      $disk = Get-PhysicalDisk -SerialNumber $serialNumber
      
      if ($null -ne $disk) {
        $physPath = "\\.\PHYSICALDRIVE" + $disk.DeviceId
        Write-Output "Found disk at $physPath, attempting WSL bare mount..."
        
        # Check if already mounted
        $mounted = wsl.exe --list --all | Select-String -Pattern $mountName
        if ($mounted) {
          Write-Output "Disk already mounted as $mountName"
        } else {
          wsl.exe --mount $physPath --bare --name $mountName
          if ($LASTEXITCODE -eq 0) {
            Write-Output "Successfully mounted as $mountName"
          } else {
            Write-Error "Failed to mount disk: exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        }
      } else {
        Write-Error "Disk with serial $serialNumber not found!"
        exit 1
      }
      
      Stop-Transcript
    '';
  };

  # Robust mount verification and retry script
  mountCheckScript = pkgs.writeShellScriptBin "wsl-mount-check" ''
    export PATH="${pkgs.coreutils}/bin:${pkgs.util-linux}/bin:${pkgs.gnugrep}/bin:$PATH"
    set -euo pipefail
    
    MOUNT_NAME="${cfg.mountName}"
    DEVICE_PATH="/dev/disk/by-id/${cfg.deviceId}"
    MOUNT_POINT="${cfg.mountPoint}"
    MAX_RETRIES=30
    RETRY_DELAY=2
    
    log() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a /var/log/wsl-mount.log
    }
    
    check_device() {
      if [[ -e "$DEVICE_PATH" ]]; then
        log "Device $DEVICE_PATH found"
        return 0
      else
        log "Device $DEVICE_PATH not found"
        return 1
      fi
    }
    
    mount_storage() {
      log "Mounting $DEVICE_PATH to $MOUNT_POINT"
      
      # Create mount point if needed
      mkdir -p "$MOUNT_POINT"
      
      # Check if already mounted
      if mountpoint -q "$MOUNT_POINT"; then
        log "Already mounted at $MOUNT_POINT"
        return 0
      fi
      
      # Mount with options
      if mount -t ${cfg.fsType} -o ${concatStringsSep "," cfg.mountOptions} "$DEVICE_PATH" "$MOUNT_POINT"; then
        log "Successfully mounted storage"
        return 0
      else
        log "Failed to mount storage"
        return 1
      fi
    }
    
    # Main retry loop
    log "Starting WSL storage mount check"
    
    for i in $(seq 1 $MAX_RETRIES); do
      if check_device; then
        if mount_storage; then
          log "Storage mount successful"
          
          # Create instance subdirectories if they don't exist
          ${concatMapStrings (dir: ''
            if [[ ! -d "$MOUNT_POINT/${dir}" ]]; then
              log "Creating directory $MOUNT_POINT/${dir}"
              mkdir -p "$MOUNT_POINT/${dir}"
              chown ${cfg.defaultUser}:${cfg.defaultGroup} "$MOUNT_POINT/${dir}"
            fi
          '') cfg.instanceDirs}
          
          exit 0
        fi
      else
        log "Attempt $i/$MAX_RETRIES: Device not ready, waiting..."
        
        # On first few attempts, try triggering Windows mount
        if [[ $i -le 3 ]]; then
          log "Attempting to trigger Windows-side mount..."
          # Use PowerShell through interop to run mount script
          ${pkgs.powershell}/bin/pwsh -Command "& { C:\Users\timbl\wsl\mount-4tb-storage.ps1 }" || true
        fi
      fi
      
      sleep $RETRY_DELAY
    done
    
    log "ERROR: Failed to mount storage after $MAX_RETRIES attempts"
    exit 1
  '';

in {
  options.wslStorageMount = {
    enable = mkEnableOption "WSL storage mounting for Nix store";
    
    diskSerialNumber = mkOption {
      type = types.str;
      description = "Physical disk serial number (from Get-PhysicalDisk)";
      example = "E823_8FA6_BF53_0001_001B_448B_4ED0_B0F4.";
    };
    
    mountName = mkOption {
      type = types.str;
      default = "internal-4tb-nvme";
      description = "WSL mount name for the bare disk";
    };
    
    deviceId = mkOption {
      type = types.str;
      default = "nvme-Samsung_SSD_990_PRO_4TB_S6Z2NJ0TC14842T";
      description = "Linux device ID (check /dev/disk/by-id/)";
    };
    
    mountPoint = mkOption {
      type = types.path;
      default = "/mnt/wsl/storage";
      description = "Mount point for the storage device";
    };
    
    fsType = mkOption {
      type = types.str;
      default = "ext4";
      description = "Filesystem type";
    };
    
    mountOptions = mkOption {
      type = types.listOf types.str;
      default = [ "defaults" "noatime" "nodiratime" ];
      description = "Mount options";
    };
    
    instanceDirs = mkOption {
      type = types.listOf types.str;
      default = [ "nixos-wsl-main" "nixos-wsl-dev" "nixos-wsl-test" ];
      description = "Subdirectories to create for each WSL instance";
    };
    
    defaultUser = mkOption {
      type = types.str;
      default = "tim";
      description = "Default owner for instance directories";
    };
    
    defaultGroup = mkOption {
      type = types.str;
      default = "users";
      description = "Default group for instance directories";
    };
    
    bindMountNixStore = mkOption {
      type = types.bool;
      default = true;
      description = "Whether to bind mount /nix from the storage";
    };
    
    nixStoreSubdir = mkOption {
      type = types.str;
      default = "nixos-wsl-${config.networking.hostName}";
      description = "Subdirectory on storage for this instance's /nix";
    };
  };
  
  config = mkIf cfg.enable {
    # Install PowerShell script to Windows location
    system.activationScripts.installMountScript = ''
      # Copy PowerShell script to Windows filesystem if needed
      WIN_SCRIPT="/mnt/c/Users/timbl/wsl/mount-4tb-storage.ps1"
      if [[ ! -f "$WIN_SCRIPT" ]] || ! diff -q "${mountScript}" "$WIN_SCRIPT" >/dev/null 2>&1; then
        echo "Installing Windows mount script..."
        mkdir -p "$(dirname "$WIN_SCRIPT")" 2>/dev/null || true
        cp "${mountScript}" "$WIN_SCRIPT" 2>/dev/null || echo "Note: Could not install Windows mount script (permission denied). This is OK if mount already works."
      fi
    '';
    
    # SystemD service for mount verification
    systemd.services.wsl-storage-mount = {
      description = "Mount WSL storage for Nix store";
      after = [ "systemd-modules-load.service" ];
      before = [ "nix-daemon.service" "local-fs.target" ];
      wantedBy = [ "multi-user.target" ];
      
      unitConfig = {
        DefaultDependencies = false;
        ConditionPathExists = "!/nix/.mounted";
      };
      
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStart = "${mountCheckScript}/bin/wsl-mount-check";
        StandardOutput = "journal+console";
        StandardError = "journal+console";
      };
    };
    
    # Bind mount for /nix if enabled
    fileSystems = mkIf cfg.bindMountNixStore {
      "/nix" = {
        device = "${cfg.mountPoint}/${cfg.nixStoreSubdir}";
        fsType = "none";
        options = [
          "bind"
          "x-systemd.automount"
          "x-systemd.idle-timeout=60"
          "x-systemd.requires=wsl-storage-mount.service"
          "x-systemd.after=wsl-storage-mount.service"
          "_netdev"
          "nofail"
        ];
      };
    };
    
    # Create a marker file when /nix is successfully mounted
    systemd.services.nix-mount-marker = mkIf cfg.bindMountNixStore {
      description = "Create marker file for /nix mount";
      after = [ "nix.mount" ];
      requires = [ "nix.mount" ];
      wantedBy = [ "multi-user.target" ];
      
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStart = "${pkgs.coreutils}/bin/touch /nix/.mounted";
      };
    };
    
    # WSL configuration for boot commands
    wsl.wslConf.boot.command = mkIf cfg.bindMountNixStore ''
      # Ensure storage is mounted at boot
      ${mountCheckScript}/bin/wsl-mount-check || true
    '';
    
    # Add mount utilities to system packages
    environment.systemPackages = [
      mountCheckScript
      pkgs.powershell  # PowerShell Core for interop
    ];
  };
}